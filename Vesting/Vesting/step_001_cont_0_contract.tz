parameter (unit %release);
storage   (pair (mutez %amount) (pair (address %beneficiary) (pair (int %duration) (pair (mutez %released) (timestamp %start)))));
code
  {
    CDR;        # @storage
    # == release ==
    # assert sp.sender == self.data.beneficiary, "you are not the beneficiary" # @storage
    DUP;        # @storage : @storage
    GET 3;      # address : @storage
    SENDER;     # @sender : address : @storage
    COMPARE;    # int : @storage
    EQ;         # bool : @storage
    IF
      {}
      {
        PUSH string "you are not the beneficiary"; # string : @storage
        FAILWITH;   # FAILED
      }; # @storage
    # assert sp.now >= self.data.start, "Release not started" # @storage
    DUP;        # @storage : @storage
    GET 8;      # timestamp : @storage
    NOW;        # @now : timestamp : @storage
    COMPARE;    # int : @storage
    GE;         # bool : @storage
    IF
      {}
      {
        PUSH string "Release not started"; # string : @storage
        FAILWITH;   # FAILED
      }; # @storage
    # if sp.now > sp.add_days(self.data.start, self.data.duration): # @storage
    PUSH int 86400; # int : @storage
    DUP 2;      # @storage : int : @storage
    GET 5;      # int : int : @storage
    MUL;        # int : @storage
    DUP 2;      # @storage : int : @storage
    GET 8;      # timestamp : int : @storage
    ADD;        # timestamp : @storage
    NOW;        # @now : timestamp : @storage
    COMPARE;    # int : @storage
    GT;         # bool : @storage
    IF
      {
        # sp.send(sp.sender, self.data.amount - self.data.released) # @storage
        NIL operation; # list operation : @storage
        SENDER;     # @sender : list operation : @storage
        CONTRACT unit; # option (contract unit) : list operation : @storage
        IF_NONE
          {
            PUSH int 21; # int : list operation : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : list operation : @storage
        DUP 3;      # @storage : @some : list operation : @storage
        GET 7;      # mutez : @some : list operation : @storage
        DUP 4;      # @storage : mutez : @some : list operation : @storage
        CAR;        # mutez : mutez : @some : list operation : @storage
        SUB_MUTEZ;  # option mutez : @some : list operation : @storage
        IF_NONE
          {
            PUSH int 21; # int : @some : list operation : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : @some : list operation : @storage
        UNIT;       # unit : @some : @some : list operation : @storage
        TRANSFER_TOKENS; # operation : list operation : @storage
        CONS;       # list operation : @storage
      }
      {
        # vesting = sp.ediv(sp.mul(self.data.amount, sp.as_nat(sp.now - self.data.start)), sp.as_nat(self.data.duration)) # @storage
        DUP;        # @storage : @storage
        GET 5;      # int : @storage
        ISNAT;      # option nat : @storage
        IF_NONE
          {
            PUSH int 23; # int : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : @storage
        DUP 2;      # @storage : @some : @storage
        GET 8;      # timestamp : @some : @storage
        NOW;        # @now : timestamp : @some : @storage
        SUB;        # int : @some : @storage
        ISNAT;      # option nat : @some : @storage
        IF_NONE
          {
            PUSH int 23; # int : @some : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : @some : @storage
        DUP 3;      # @storage : @some : @some : @storage
        CAR;        # mutez : @some : @some : @storage
        MUL;        # mutez : @some : @storage
        EDIV;       # option (pair mutez mutez) : @storage
        # released = sp.fst(vesting.unwrap_some()) - self.data.released # option (pair mutez mutez) : @storage
        DUP 2;      # @storage : option (pair mutez mutez) : @storage
        GET 7;      # mutez : option (pair mutez mutez) : @storage
        SWAP;       # option (pair mutez mutez) : mutez : @storage
        IF_NONE
          {
            PUSH int 24; # int : mutez : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : mutez : @storage
        CAR;        # mutez : mutez : @storage
        SUB_MUTEZ;  # option mutez : @storage
        IF_NONE
          {
            PUSH int 24; # int : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : @storage
        # sp.send(sp.sender, released) # @some : @storage
        NIL operation; # list operation : @some : @storage
        SENDER;     # @sender : list operation : @some : @storage
        CONTRACT unit; # option (contract unit) : list operation : @some : @storage
        IF_NONE
          {
            PUSH int 25; # int : list operation : @some : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : list operation : @some : @storage
        DUP 3;      # @some : @some : list operation : @some : @storage
        UNIT;       # unit : @some : @some : list operation : @some : @storage
        TRANSFER_TOKENS; # operation : list operation : @some : @storage
        CONS;       # list operation : @some : @storage
        # self.data.released += released # list operation : @some : @storage
        DIG 2;      # @storage : list operation : @some
        DUP;        # @storage : @storage : list operation : @some
        GET 7;      # mutez : @storage : list operation : @some
        DIG 3;      # @some : mutez : @storage : list operation
        ADD;        # mutez : @storage : list operation
        UPDATE 7;   # @storage : list operation
        SWAP;       # list operation : @storage
      }; # list operation : @storage
    PAIR;       # pair (list operation) @storage
  };